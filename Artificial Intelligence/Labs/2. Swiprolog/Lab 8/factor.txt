factor(N, L) :-
	factor(N, 1, [], L).
 
factor(N, X, LC, L) :-
	0 is N mod X,
	!,
	Q is N / X,
	(Q = X ->
	    sort([Q | LC], L)
	;
	    (Q > X ->
	       X1 is X+1,
	       factor(N, X1, [X, Q|LC], L)
	    ;
	      sort(LC, L)
	    )
	).
 
factor(N, X, LC, L) :-
	Q is N / X,
	(Q > X ->
	    X1 is X+1,
	    factor(N, X1, LC, L)
	;
	    sort(LC, L)
	).
trace
domains
    x = integer
    l = integer*
    
predicates
    count(x,l,x)
    
clauses
    count(Element,[],0).
    
    count(Element,[X|List],OccurNum) :-
        Element = X,!,
        count(Element,List,OccurNum1),
        OccurNum = OccurNum1 + 1.
        
    count(Element,[X|List],OccurNum) :-
        count(Element,List,OccurNum).
        
Output :

Goal: count(2,[2,3,2,5,2,6],N)

N=3
1 Solution

Goal: count(2,[],N)

N=0
1 Solution